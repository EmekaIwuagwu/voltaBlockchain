# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from proto import blockchain_pb2 as blockchain__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in blockchain_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class BlockchainServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAddress = channel.unary_unary(
                '/blockchain.BlockchainService/CreateAddress',
                request_serializer=blockchain__pb2.CreateAddressRequest.SerializeToString,
                response_deserializer=blockchain__pb2.UserAddress.FromString,
                _registered_method=True)
        self.SendTokens = channel.unary_unary(
                '/blockchain.BlockchainService/SendTokens',
                request_serializer=blockchain__pb2.SendTokensRequest.SerializeToString,
                response_deserializer=blockchain__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.CheckBalance = channel.unary_unary(
                '/blockchain.BlockchainService/CheckBalance',
                request_serializer=blockchain__pb2.CheckBalanceRequest.SerializeToString,
                response_deserializer=blockchain__pb2.BalanceResponse.FromString,
                _registered_method=True)
        self.CheckTransactions = channel.unary_unary(
                '/blockchain.BlockchainService/CheckTransactions',
                request_serializer=blockchain__pb2.CheckTransactionsRequest.SerializeToString,
                response_deserializer=blockchain__pb2.TransactionHistoryResponse.FromString,
                _registered_method=True)
        self.RequestLoan = channel.unary_unary(
                '/blockchain.BlockchainService/RequestLoan',
                request_serializer=blockchain__pb2.RequestLoanRequest.SerializeToString,
                response_deserializer=blockchain__pb2.LoanResponse.FromString,
                _registered_method=True)
        self.PayBackLoan = channel.unary_unary(
                '/blockchain.BlockchainService/PayBackLoan',
                request_serializer=blockchain__pb2.PayBackLoanRequest.SerializeToString,
                response_deserializer=blockchain__pb2.LoanResponse.FromString,
                _registered_method=True)


class BlockchainServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendTokens(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckTransactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestLoan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PayBackLoan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BlockchainServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAddress,
                    request_deserializer=blockchain__pb2.CreateAddressRequest.FromString,
                    response_serializer=blockchain__pb2.UserAddress.SerializeToString,
            ),
            'SendTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.SendTokens,
                    request_deserializer=blockchain__pb2.SendTokensRequest.FromString,
                    response_serializer=blockchain__pb2.TransactionResponse.SerializeToString,
            ),
            'CheckBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckBalance,
                    request_deserializer=blockchain__pb2.CheckBalanceRequest.FromString,
                    response_serializer=blockchain__pb2.BalanceResponse.SerializeToString,
            ),
            'CheckTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckTransactions,
                    request_deserializer=blockchain__pb2.CheckTransactionsRequest.FromString,
                    response_serializer=blockchain__pb2.TransactionHistoryResponse.SerializeToString,
            ),
            'RequestLoan': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestLoan,
                    request_deserializer=blockchain__pb2.RequestLoanRequest.FromString,
                    response_serializer=blockchain__pb2.LoanResponse.SerializeToString,
            ),
            'PayBackLoan': grpc.unary_unary_rpc_method_handler(
                    servicer.PayBackLoan,
                    request_deserializer=blockchain__pb2.PayBackLoanRequest.FromString,
                    response_serializer=blockchain__pb2.LoanResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'blockchain.BlockchainService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('blockchain.BlockchainService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BlockchainService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blockchain.BlockchainService/CreateAddress',
            blockchain__pb2.CreateAddressRequest.SerializeToString,
            blockchain__pb2.UserAddress.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blockchain.BlockchainService/SendTokens',
            blockchain__pb2.SendTokensRequest.SerializeToString,
            blockchain__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blockchain.BlockchainService/CheckBalance',
            blockchain__pb2.CheckBalanceRequest.SerializeToString,
            blockchain__pb2.BalanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blockchain.BlockchainService/CheckTransactions',
            blockchain__pb2.CheckTransactionsRequest.SerializeToString,
            blockchain__pb2.TransactionHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RequestLoan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blockchain.BlockchainService/RequestLoan',
            blockchain__pb2.RequestLoanRequest.SerializeToString,
            blockchain__pb2.LoanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PayBackLoan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/blockchain.BlockchainService/PayBackLoan',
            blockchain__pb2.PayBackLoanRequest.SerializeToString,
            blockchain__pb2.LoanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
